# Generated by Django 4.0.10 on 2023-02-24 11:34

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenericUserData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_normal', models.BooleanField(default=False)),
                ('is_seller', models.BooleanField(default=False)),
                ('is_emp', models.BooleanField(default=False)),
                ('is_seller_activated', models.BooleanField(default=False)),
                ('bdata', models.DateField()),
                ('is_male', models.BooleanField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NormalSellerDetails',
            fields=[
                ('userid', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, unique=True)),
                ('mobileauthenticationenabled', models.IntegerField(db_column='MobileAuthenticationEnabled', default=0)),
                ('emailauthenticationenabled', models.IntegerField(db_column='EmailAuthenticationEnabled', default=0)),
                ('mobilephone', models.CharField(blank=True, db_column='MobilePhone', max_length=20, null=True)),
                ('profilepiclink', models.CharField(blank=True, db_column='ProfilePicLink', max_length=128, null=True)),
            ],
            options={
                'db_table': 'nrmlseller',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('empid', models.ForeignKey(db_column='EmpID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, unique=True)),
                ('permissionkey', models.SmallIntegerField(db_column='PermissionKey')),
            ],
            options={
                'db_table': 'permissions',
                'managed': True,
                'unique_together': {('empid', 'permissionkey')},
            },
        ),
    ]
